// Code generated by mockery v2.43.2. DO NOT EDIT.

package repositories

import (
	entities "capstone/entities"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// ArticleRepository is an autogenerated mock type for the ArticleRepository type
type ArticleRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: article
func (_m *ArticleRepository) Create(article entities.Article) (entities.Article, error) {
	ret := _m.Called(article)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entities.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.Article) (entities.Article, error)); ok {
		return rf(article)
	}
	if rf, ok := ret.Get(0).(func(entities.Article) entities.Article); ok {
		r0 = rf(article)
	} else {
		r0 = ret.Get(0).(entities.Article)
	}

	if rf, ok := ret.Get(1).(func(entities.Article) error); ok {
		r1 = rf(article)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *ArticleRepository) Delete(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: page, limit
func (_m *ArticleRepository) FindAll(page int, limit int) ([]entities.Article, int, error) {
	ret := _m.Called(page, limit)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []entities.Article
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) ([]entities.Article, int, error)); ok {
		return rf(page, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []entities.Article); ok {
		r0 = rf(page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(page, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindByID provides a mock function with given fields: id
func (_m *ArticleRepository) FindByID(id uint) (entities.Article, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 entities.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (entities.Article, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) entities.Article); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.Article)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTop provides a mock function with given fields:
func (_m *ArticleRepository) FindTop() ([]entities.Article, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindTop")
	}

	var r0 []entities.Article
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities.Article, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities.Article); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Article)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: article
func (_m *ArticleRepository) Save(article *entities.Article) *gorm.DB {
	ret := _m.Called(article)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(*entities.Article) *gorm.DB); ok {
		r0 = rf(article)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// Update provides a mock function with given fields: article
func (_m *ArticleRepository) Update(article entities.Article) (entities.Article, error) {
	ret := _m.Called(article)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 entities.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.Article) (entities.Article, error)); ok {
		return rf(article)
	}
	if rf, ok := ret.Get(0).(func(entities.Article) entities.Article); ok {
		r0 = rf(article)
	} else {
		r0 = ret.Get(0).(entities.Article)
	}

	if rf, ok := ret.Get(1).(func(entities.Article) error); ok {
		r1 = rf(article)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewArticleRepository creates a new instance of ArticleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArticleRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArticleRepository {
	mock := &ArticleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
