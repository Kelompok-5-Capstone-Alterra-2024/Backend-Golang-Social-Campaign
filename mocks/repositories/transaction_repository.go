// Code generated by mockery v2.43.2. DO NOT EDIT.

package repositories

import (
	entities "capstone/entities"

	mock "github.com/stretchr/testify/mock"
)

// TransactionRepository is an autogenerated mock type for the TransactionRepository type
type TransactionRepository struct {
	mock.Mock
}

// FindAll provides a mock function with given fields: limit, offset
func (_m *TransactionRepository) FindAll(limit int, offset int) ([]entities.Transaction, error) {
	ret := _m.Called(limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []entities.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]entities.Transaction, error)); ok {
		return rf(limit, offset)
	}
	if rf, ok := ret.Get(0).(func(int, int) []entities.Transaction); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *TransactionRepository) FindByID(id uint) (entities.Transaction, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 entities.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (entities.Transaction, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) entities.Transaction); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.Transaction)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: transaction
func (_m *TransactionRepository) Save(transaction entities.Transaction) (entities.Transaction, error) {
	ret := _m.Called(transaction)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 entities.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.Transaction) (entities.Transaction, error)); ok {
		return rf(transaction)
	}
	if rf, ok := ret.Get(0).(func(entities.Transaction) entities.Transaction); ok {
		r0 = rf(transaction)
	} else {
		r0 = ret.Get(0).(entities.Transaction)
	}

	if rf, ok := ret.Get(1).(func(entities.Transaction) error); ok {
		r1 = rf(transaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransactionRepository creates a new instance of TransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionRepository {
	mock := &TransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
