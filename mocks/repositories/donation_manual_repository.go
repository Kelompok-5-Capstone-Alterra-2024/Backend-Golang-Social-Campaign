// Code generated by mockery v2.43.2. DO NOT EDIT.

package repositories

import (
	entities "capstone/entities"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// DonationManualRepository is an autogenerated mock type for the DonationManualRepository type
type DonationManualRepository struct {
	mock.Mock
}

// CreateLike provides a mock function with given fields: ctx, like
func (_m *DonationManualRepository) CreateLike(ctx context.Context, like entities.LikeDonationManualComment) error {
	ret := _m.Called(ctx, like)

	if len(ret) == 0 {
		panic("no return value specified for CreateLike")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.LikeDonationManualComment) error); ok {
		r0 = rf(ctx, like)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DecrementLike provides a mock function with given fields: ctx, commentID
func (_m *DonationManualRepository) DecrementLike(ctx context.Context, commentID uint) error {
	ret := _m.Called(ctx, commentID)

	if len(ret) == 0 {
		panic("no return value specified for DecrementLike")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, commentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByDonationID provides a mock function with given fields: id
func (_m *DonationManualRepository) GetByDonationID(id int) ([]entities.DonationManual, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByDonationID")
	}

	var r0 []entities.DonationManual
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]entities.DonationManual, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) []entities.DonationManual); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.DonationManual)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *DonationManualRepository) GetByID(id int) (entities.DonationManual, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 entities.DonationManual
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (entities.DonationManual, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) entities.DonationManual); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.DonationManual)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: limit, offset, userID
func (_m *DonationManualRepository) GetByUserID(limit int, offset int, userID uint) ([]entities.DonationManual, error) {
	ret := _m.Called(limit, offset, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 []entities.DonationManual
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, uint) ([]entities.DonationManual, error)); ok {
		return rf(limit, offset, userID)
	}
	if rf, ok := ret.Get(0).(func(int, int, uint) []entities.DonationManual); ok {
		r0 = rf(limit, offset, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.DonationManual)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, uint) error); ok {
		r1 = rf(limit, offset, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommentsByDonationID provides a mock function with given fields: id
func (_m *DonationManualRepository) GetCommentsByDonationID(id int) ([]entities.DonationManualComment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetCommentsByDonationID")
	}

	var r0 []entities.DonationManualComment
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]entities.DonationManualComment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) []entities.DonationManualComment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.DonationManualComment)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementLike provides a mock function with given fields: ctx, commentID
func (_m *DonationManualRepository) IncrementLike(ctx context.Context, commentID uint) error {
	ret := _m.Called(ctx, commentID)

	if len(ret) == 0 {
		panic("no return value specified for IncrementLike")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, commentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsLiked provides a mock function with given fields: ctx, commentID, userID
func (_m *DonationManualRepository) IsLiked(ctx context.Context, commentID uint, userID uint) (bool, error) {
	ret := _m.Called(ctx, commentID, userID)

	if len(ret) == 0 {
		panic("no return value specified for IsLiked")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) (bool, error)); ok {
		return rf(ctx, commentID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) bool); ok {
		r0 = rf(ctx, commentID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, uint) error); ok {
		r1 = rf(ctx, commentID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveLike provides a mock function with given fields: ctx, commentID, userID
func (_m *DonationManualRepository) RemoveLike(ctx context.Context, commentID uint, userID uint) error {
	ret := _m.Called(ctx, commentID, userID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveLike")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) error); ok {
		r0 = rf(ctx, commentID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: donation
func (_m *DonationManualRepository) Save(donation entities.DonationManual) (entities.DonationManual, error) {
	ret := _m.Called(donation)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 entities.DonationManual
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.DonationManual) (entities.DonationManual, error)); ok {
		return rf(donation)
	}
	if rf, ok := ret.Get(0).(func(entities.DonationManual) entities.DonationManual); ok {
		r0 = rf(donation)
	} else {
		r0 = ret.Get(0).(entities.DonationManual)
	}

	if rf, ok := ret.Get(1).(func(entities.DonationManual) error); ok {
		r1 = rf(donation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveComment provides a mock function with given fields: donationComment
func (_m *DonationManualRepository) SaveComment(donationComment entities.DonationManualComment) (entities.DonationManualComment, error) {
	ret := _m.Called(donationComment)

	if len(ret) == 0 {
		panic("no return value specified for SaveComment")
	}

	var r0 entities.DonationManualComment
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.DonationManualComment) (entities.DonationManualComment, error)); ok {
		return rf(donationComment)
	}
	if rf, ok := ret.Get(0).(func(entities.DonationManualComment) entities.DonationManualComment); ok {
		r0 = rf(donationComment)
	} else {
		r0 = ret.Get(0).(entities.DonationManualComment)
	}

	if rf, ok := ret.Get(1).(func(entities.DonationManualComment) error); ok {
		r1 = rf(donationComment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: donation
func (_m *DonationManualRepository) Update(donation entities.DonationManual) (entities.DonationManual, error) {
	ret := _m.Called(donation)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 entities.DonationManual
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.DonationManual) (entities.DonationManual, error)); ok {
		return rf(donation)
	}
	if rf, ok := ret.Get(0).(func(entities.DonationManual) entities.DonationManual); ok {
		r0 = rf(donation)
	} else {
		r0 = ret.Get(0).(entities.DonationManual)
	}

	if rf, ok := ret.Get(1).(func(entities.DonationManual) error); ok {
		r1 = rf(donation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDonationManualRepository creates a new instance of DonationManualRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDonationManualRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *DonationManualRepository {
	mock := &DonationManualRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
