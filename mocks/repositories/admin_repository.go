// Code generated by mockery v2.43.2. DO NOT EDIT.

package repositories

import (
	entities "capstone/entities"

	mock "github.com/stretchr/testify/mock"

	repositories "capstone/repositories"

	time "time"
)

// AdminRepository is an autogenerated mock type for the AdminRepository type
type AdminRepository struct {
	mock.Mock
}

// AddAmountToUserDonation provides a mock function with given fields: id, amount
func (_m *AdminRepository) AddAmountToUserDonation(id uint, amount int) (entities.DonationManual, error) {
	ret := _m.Called(id, amount)

	if len(ret) == 0 {
		panic("no return value specified for AddAmountToUserDonation")
	}

	var r0 entities.DonationManual
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, int) (entities.DonationManual, error)); ok {
		return rf(id, amount)
	}
	if rf, ok := ret.Get(0).(func(uint, int) entities.DonationManual); ok {
		r0 = rf(id, amount)
	} else {
		r0 = ret.Get(0).(entities.DonationManual)
	}

	if rf, ok := ret.Get(1).(func(uint, int) error); ok {
		r1 = rf(id, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: fundraising
func (_m *AdminRepository) Create(fundraising entities.Fundraising) (entities.Fundraising, error) {
	ret := _m.Called(fundraising)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entities.Fundraising
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.Fundraising) (entities.Fundraising, error)); ok {
		return rf(fundraising)
	}
	if rf, ok := ret.Get(0).(func(entities.Fundraising) entities.Fundraising); ok {
		r0 = rf(fundraising)
	} else {
		r0 = ret.Get(0).(entities.Fundraising)
	}

	if rf, ok := ret.Get(1).(func(entities.Fundraising) error); ok {
		r1 = rf(fundraising)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFundraising provides a mock function with given fields: id
func (_m *AdminRepository) DeleteFundraising(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFundraising")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOrganizationByID provides a mock function with given fields: id
func (_m *AdminRepository) DeleteOrganizationByID(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganizationByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserWithDonations provides a mock function with given fields: id
func (_m *AdminRepository) DeleteUserWithDonations(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserWithDonations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DistributeFundFundraising provides a mock function with given fields: id, amount
func (_m *AdminRepository) DistributeFundFundraising(id uint, amount int) (entities.Fundraising, error) {
	ret := _m.Called(id, amount)

	if len(ret) == 0 {
		panic("no return value specified for DistributeFundFundraising")
	}

	var r0 entities.Fundraising
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, int) (entities.Fundraising, error)); ok {
		return rf(id, amount)
	}
	if rf, ok := ret.Get(0).(func(uint, int) entities.Fundraising); ok {
		r0 = rf(id, amount)
	} else {
		r0 = ret.Get(0).(entities.Fundraising)
	}

	if rf, ok := ret.Get(1).(func(uint, int) error); ok {
		r1 = rf(id, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllDonations provides a mock function with given fields: page, limit
func (_m *AdminRepository) FindAllDonations(page int, limit int) ([]entities.DonationManual, int, error) {
	ret := _m.Called(page, limit)

	if len(ret) == 0 {
		panic("no return value specified for FindAllDonations")
	}

	var r0 []entities.DonationManual
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) ([]entities.DonationManual, int, error)); ok {
		return rf(page, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []entities.DonationManual); ok {
		r0 = rf(page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.DonationManual)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(page, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindAllFundraising provides a mock function with given fields: limit, offset
func (_m *AdminRepository) FindAllFundraising(limit int, offset int) ([]entities.Fundraising, error) {
	ret := _m.Called(limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for FindAllFundraising")
	}

	var r0 []entities.Fundraising
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]entities.Fundraising, error)); ok {
		return rf(limit, offset)
	}
	if rf, ok := ret.Get(0).(func(int, int) []entities.Fundraising); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Fundraising)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUsername provides a mock function with given fields: username
func (_m *AdminRepository) FindByUsername(username string) (entities.Admin, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for FindByUsername")
	}

	var r0 entities.Admin
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entities.Admin, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) entities.Admin); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(entities.Admin)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindDonationsByFundraisingID provides a mock function with given fields: id, limit, offset
func (_m *AdminRepository) FindDonationsByFundraisingID(id int, limit int, offset int) ([]entities.DonationManual, error) {
	ret := _m.Called(id, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for FindDonationsByFundraisingID")
	}

	var r0 []entities.DonationManual
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, int) ([]entities.DonationManual, error)); ok {
		return rf(id, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(int, int, int) []entities.DonationManual); ok {
		r0 = rf(id, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.DonationManual)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(id, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindDonationsByUserID provides a mock function with given fields: id, page, limit
func (_m *AdminRepository) FindDonationsByUserID(id int, page int, limit int) ([]entities.DonationManual, int, error) {
	ret := _m.Called(id, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for FindDonationsByUserID")
	}

	var r0 []entities.DonationManual
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, int) ([]entities.DonationManual, int, error)); ok {
		return rf(id, page, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int, int) []entities.DonationManual); ok {
		r0 = rf(id, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.DonationManual)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, int) int); ok {
		r1 = rf(id, page, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(int, int, int) error); ok {
		r2 = rf(id, page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindDonationsLastSevenDays provides a mock function with given fields:
func (_m *AdminRepository) FindDonationsLastSevenDays() ([]entities.DonationManual, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindDonationsLastSevenDays")
	}

	var r0 []entities.DonationManual
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities.DonationManual, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities.DonationManual); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.DonationManual)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindFundraisingByDonationID provides a mock function with given fields: id
func (_m *AdminRepository) FindFundraisingByDonationID(id int) (entities.Fundraising, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindFundraisingByDonationID")
	}

	var r0 entities.Fundraising
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (entities.Fundraising, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) entities.Fundraising); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.Fundraising)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindFundraisingByID provides a mock function with given fields: id
func (_m *AdminRepository) FindFundraisingByID(id int) (entities.Fundraising, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindFundraisingByID")
	}

	var r0 entities.Fundraising
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (entities.Fundraising, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) entities.Fundraising); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.Fundraising)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOrganizationByID provides a mock function with given fields: id
func (_m *AdminRepository) FindOrganizationByID(id int) (entities.Organization, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindOrganizationByID")
	}

	var r0 entities.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (entities.Organization, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) entities.Organization); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.Organization)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOrganizations provides a mock function with given fields: limit, offset
func (_m *AdminRepository) FindOrganizations(limit int, offset int) ([]entities.Organization, error) {
	ret := _m.Called(limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for FindOrganizations")
	}

	var r0 []entities.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]entities.Organization, error)); ok {
		return rf(limit, offset)
	}
	if rf, ok := ret.Get(0).(func(int, int) []entities.Organization); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByID provides a mock function with given fields: id
func (_m *AdminRepository) FindUserByID(id int) (entities.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByID")
	}

	var r0 entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (entities.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) entities.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUsers provides a mock function with given fields: limit, offset
func (_m *AdminRepository) FindUsers(limit int, offset int) ([]entities.User, error) {
	ret := _m.Called(limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for FindUsers")
	}

	var r0 []entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]entities.User, error)); ok {
		return rf(limit, offset)
	}
	if rf, ok := ret.Get(0).(func(int, int) []entities.User); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindVolunteersByUserID provides a mock function with given fields: id, page, limit
func (_m *AdminRepository) FindVolunteersByUserID(id int, page int, limit int) ([]entities.Application, int, error) {
	ret := _m.Called(id, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for FindVolunteersByUserID")
	}

	var r0 []entities.Application
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, int) ([]entities.Application, int, error)); ok {
		return rf(id, page, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int, int) []entities.Application); ok {
		r0 = rf(id, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, int) int); ok {
		r1 = rf(id, page, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(int, int, int) error); ok {
		r2 = rf(id, page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetArticlesOrderedByBookmarks provides a mock function with given fields: limit
func (_m *AdminRepository) GetArticlesOrderedByBookmarks(limit int) ([]entities.ArticleWithBookmarkCount, error) {
	ret := _m.Called(limit)

	if len(ret) == 0 {
		panic("no return value specified for GetArticlesOrderedByBookmarks")
	}

	var r0 []entities.ArticleWithBookmarkCount
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]entities.ArticleWithBookmarkCount, error)); ok {
		return rf(limit)
	}
	if rf, ok := ret.Get(0).(func(int) []entities.ArticleWithBookmarkCount); ok {
		r0 = rf(limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.ArticleWithBookmarkCount)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategoriesWithCount provides a mock function with given fields:
func (_m *AdminRepository) GetCategoriesWithCount() ([]entities.FundraisingCategoryWithCount, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCategoriesWithCount")
	}

	var r0 []entities.FundraisingCategoryWithCount
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities.FundraisingCategoryWithCount, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities.FundraisingCategoryWithCount); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.FundraisingCategoryWithCount)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDailyTransactionStats provides a mock function with given fields:
func (_m *AdminRepository) GetDailyTransactionStats() ([]repositories.TransactionStat, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDailyTransactionStats")
	}

	var r0 []repositories.TransactionStat
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]repositories.TransactionStat, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []repositories.TransactionStat); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repositories.TransactionStat)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFundraisingByOrganizationID provides a mock function with given fields: id, limt, offset
func (_m *AdminRepository) GetFundraisingByOrganizationID(id int, limt int, offset int) ([]entities.Fundraising, error) {
	ret := _m.Called(id, limt, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetFundraisingByOrganizationID")
	}

	var r0 []entities.Fundraising
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, int) ([]entities.Fundraising, error)); ok {
		return rf(id, limt, offset)
	}
	if rf, ok := ret.Get(0).(func(int, int, int) []entities.Fundraising); ok {
		r0 = rf(id, limt, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Fundraising)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(id, limt, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTodayArticle provides a mock function with given fields:
func (_m *AdminRepository) GetTodayArticle() (float64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTodayArticle")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func() (float64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTodayDonations provides a mock function with given fields:
func (_m *AdminRepository) GetTodayDonations() (float64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTodayDonations")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func() (float64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTodayTransaction provides a mock function with given fields:
func (_m *AdminRepository) GetTodayTransaction() (float64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTodayTransaction")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func() (float64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTodayVolunteer provides a mock function with given fields:
func (_m *AdminRepository) GetTodayVolunteer() (float64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTodayVolunteer")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func() (float64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalAmountByDate provides a mock function with given fields: date
func (_m *AdminRepository) GetTotalAmountByDate(date time.Time) (float64, error) {
	ret := _m.Called(date)

	if len(ret) == 0 {
		panic("no return value specified for GetTotalAmountByDate")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time) (float64, error)); ok {
		return rf(date)
	}
	if rf, ok := ret.Get(0).(func(time.Time) float64); ok {
		r0 = rf(date)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(time.Time) error); ok {
		r1 = rf(date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalAmountDonations provides a mock function with given fields:
func (_m *AdminRepository) GetTotalAmountDonations() (int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTotalAmountDonations")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalArticles provides a mock function with given fields:
func (_m *AdminRepository) GetTotalArticles() (int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTotalArticles")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalTransactions provides a mock function with given fields:
func (_m *AdminRepository) GetTotalTransactions() (int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTotalTransactions")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalUserVolunteers provides a mock function with given fields:
func (_m *AdminRepository) GetTotalUserVolunteers() (int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTotalUserVolunteers")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionsLast7Days provides a mock function with given fields:
func (_m *AdminRepository) GetTransactionsLast7Days() ([]entities.Transaction, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionsLast7Days")
	}

	var r0 []entities.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities.Transaction, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities.Transaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVolunteerByOrganizationID provides a mock function with given fields: id, limit, offset
func (_m *AdminRepository) GetVolunteerByOrganizationID(id int, limit int, offset int) ([]entities.Volunteer, error) {
	ret := _m.Called(id, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetVolunteerByOrganizationID")
	}

	var r0 []entities.Volunteer
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, int) ([]entities.Volunteer, error)); ok {
		return rf(id, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(int, int, int) []entities.Volunteer); ok {
		r0 = rf(id, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Volunteer)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(id, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetYesterdayTotalArticle provides a mock function with given fields:
func (_m *AdminRepository) GetYesterdayTotalArticle() (float64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetYesterdayTotalArticle")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func() (float64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetYesterdayTotalDonations provides a mock function with given fields:
func (_m *AdminRepository) GetYesterdayTotalDonations() (float64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetYesterdayTotalDonations")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func() (float64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetYesterdayTotalTransaction provides a mock function with given fields:
func (_m *AdminRepository) GetYesterdayTotalTransaction() (float64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetYesterdayTotalTransaction")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func() (float64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetYesterdayTotalVolunteer provides a mock function with given fields:
func (_m *AdminRepository) GetYesterdayTotalVolunteer() (float64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetYesterdayTotalVolunteer")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func() (float64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFundraisingByID provides a mock function with given fields: id, fundraising
func (_m *AdminRepository) UpdateFundraisingByID(id uint, fundraising entities.Fundraising) (entities.Fundraising, error) {
	ret := _m.Called(id, fundraising)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFundraisingByID")
	}

	var r0 entities.Fundraising
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, entities.Fundraising) (entities.Fundraising, error)); ok {
		return rf(id, fundraising)
	}
	if rf, ok := ret.Get(0).(func(uint, entities.Fundraising) entities.Fundraising); ok {
		r0 = rf(id, fundraising)
	} else {
		r0 = ret.Get(0).(entities.Fundraising)
	}

	if rf, ok := ret.Get(1).(func(uint, entities.Fundraising) error); ok {
		r1 = rf(id, fundraising)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrganizationByID provides a mock function with given fields: id, organization
func (_m *AdminRepository) UpdateOrganizationByID(id uint, organization entities.Organization) (entities.Organization, error) {
	ret := _m.Called(id, organization)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationByID")
	}

	var r0 entities.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, entities.Organization) (entities.Organization, error)); ok {
		return rf(id, organization)
	}
	if rf, ok := ret.Get(0).(func(uint, entities.Organization) entities.Organization); ok {
		r0 = rf(id, organization)
	} else {
		r0 = ret.Get(0).(entities.Organization)
	}

	if rf, ok := ret.Get(1).(func(uint, entities.Organization) error); ok {
		r1 = rf(id, organization)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserByID provides a mock function with given fields: id, user
func (_m *AdminRepository) UpdateUserByID(id uint, user entities.User) (entities.User, error) {
	ret := _m.Called(id, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserByID")
	}

	var r0 entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, entities.User) (entities.User, error)); ok {
		return rf(id, user)
	}
	if rf, ok := ret.Get(0).(func(uint, entities.User) entities.User); ok {
		r0 = rf(id, user)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	if rf, ok := ret.Get(1).(func(uint, entities.User) error); ok {
		r1 = rf(id, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAdminRepository creates a new instance of AdminRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdminRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdminRepository {
	mock := &AdminRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
