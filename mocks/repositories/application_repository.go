// Code generated by mockery v2.43.2. DO NOT EDIT.

package repositories

import (
	entities "capstone/entities"

	mock "github.com/stretchr/testify/mock"
)

// ApplicationRepository is an autogenerated mock type for the ApplicationRepository type
type ApplicationRepository struct {
	mock.Mock
}

// DeleteByID provides a mock function with given fields: id
func (_m *ApplicationRepository) DeleteByID(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: offset, limit
func (_m *ApplicationRepository) FindAll(offset int, limit int) ([]entities.Application, int64, error) {
	ret := _m.Called(offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []entities.Application
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) ([]entities.Application, int64, error)); ok {
		return rf(offset, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []entities.Application); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) int64); ok {
		r1 = rf(offset, limit)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(offset, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindByCustomerIDAndVacancyID provides a mock function with given fields: customerID, vacancyID
func (_m *ApplicationRepository) FindByCustomerIDAndVacancyID(customerID uint, vacancyID uint) (entities.Application, error) {
	ret := _m.Called(customerID, vacancyID)

	if len(ret) == 0 {
		panic("no return value specified for FindByCustomerIDAndVacancyID")
	}

	var r0 entities.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (entities.Application, error)); ok {
		return rf(customerID, vacancyID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) entities.Application); ok {
		r0 = rf(customerID, vacancyID)
	} else {
		r0 = ret.Get(0).(entities.Application)
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(customerID, vacancyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *ApplicationRepository) FindByID(id uint) (entities.Application, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 entities.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (entities.Application, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) entities.Application); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.Application)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByVacancyID provides a mock function with given fields: vacancyID, page, limit
func (_m *ApplicationRepository) FindByVacancyID(vacancyID uint, page int, limit int) ([]entities.Application, int, error) {
	ret := _m.Called(vacancyID, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for FindByVacancyID")
	}

	var r0 []entities.Application
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(uint, int, int) ([]entities.Application, int, error)); ok {
		return rf(vacancyID, page, limit)
	}
	if rf, ok := ret.Get(0).(func(uint, int, int) []entities.Application); ok {
		r0 = rf(vacancyID, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, int, int) int); ok {
		r1 = rf(vacancyID, page, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(uint, int, int) error); ok {
		r2 = rf(vacancyID, page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Save provides a mock function with given fields: application
func (_m *ApplicationRepository) Save(application entities.Application) (entities.Application, error) {
	ret := _m.Called(application)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 entities.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.Application) (entities.Application, error)); ok {
		return rf(application)
	}
	if rf, ok := ret.Get(0).(func(entities.Application) entities.Application); ok {
		r0 = rf(application)
	} else {
		r0 = ret.Get(0).(entities.Application)
	}

	if rf, ok := ret.Get(1).(func(entities.Application) error); ok {
		r1 = rf(application)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewApplicationRepository creates a new instance of ApplicationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApplicationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ApplicationRepository {
	mock := &ApplicationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
