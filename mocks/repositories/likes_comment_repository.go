// Code generated by mockery v2.43.2. DO NOT EDIT.

package repositories

import (
	entities "capstone/entities"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// LikesCommentRepository is an autogenerated mock type for the LikesCommentRepository type
type LikesCommentRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, likesComment
func (_m *LikesCommentRepository) Create(ctx context.Context, likesComment entities.LikesComment) error {
	ret := _m.Called(ctx, likesComment)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.LikesComment) error); ok {
		r0 = rf(ctx, likesComment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DecrementLike provides a mock function with given fields: ctx, commentID
func (_m *LikesCommentRepository) DecrementLike(ctx context.Context, commentID uint) error {
	ret := _m.Called(ctx, commentID)

	if len(ret) == 0 {
		panic("no return value specified for DecrementLike")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, commentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, commentID, userID
func (_m *LikesCommentRepository) Delete(ctx context.Context, commentID uint, userID uint) error {
	ret := _m.Called(ctx, commentID, userID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) error); ok {
		r0 = rf(ctx, commentID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *LikesCommentRepository) FindAll() ([]entities.LikesComment, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []entities.LikesComment
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities.LikesComment, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities.LikesComment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.LikesComment)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByCustomerAndComment provides a mock function with given fields: customerID, commentID
func (_m *LikesCommentRepository) FindByCustomerAndComment(customerID uint, commentID uint) (entities.LikesComment, error) {
	ret := _m.Called(customerID, commentID)

	if len(ret) == 0 {
		panic("no return value specified for FindByCustomerAndComment")
	}

	var r0 entities.LikesComment
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (entities.LikesComment, error)); ok {
		return rf(customerID, commentID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) entities.LikesComment); ok {
		r0 = rf(customerID, commentID)
	} else {
		r0 = ret.Get(0).(entities.LikesComment)
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(customerID, commentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *LikesCommentRepository) FindByID(id uint) (entities.LikesComment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 entities.LikesComment
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (entities.LikesComment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) entities.LikesComment); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.LikesComment)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementLike provides a mock function with given fields: ctx, commentID
func (_m *LikesCommentRepository) IncrementLike(ctx context.Context, commentID uint) error {
	ret := _m.Called(ctx, commentID)

	if len(ret) == 0 {
		panic("no return value specified for IncrementLike")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, commentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsLiked provides a mock function with given fields: commentID, userID
func (_m *LikesCommentRepository) IsLiked(commentID uint, userID uint) (bool, error) {
	ret := _m.Called(commentID, userID)

	if len(ret) == 0 {
		panic("no return value specified for IsLiked")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (bool, error)); ok {
		return rf(commentID, userID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) bool); ok {
		r0 = rf(commentID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(commentID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLikesCommentRepository creates a new instance of LikesCommentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLikesCommentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *LikesCommentRepository {
	mock := &LikesCommentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
