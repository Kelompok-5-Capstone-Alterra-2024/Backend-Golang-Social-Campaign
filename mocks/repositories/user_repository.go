// Code generated by mockery v2.43.2. DO NOT EDIT.

package repositories

import (
	entities "capstone/entities"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// AddUserArticleBookmark provides a mock function with given fields: user
func (_m *UserRepository) AddUserArticleBookmark(user entities.UserBookmarkArticle) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for AddUserArticleBookmark")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.UserBookmarkArticle) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddUserFundraisingBookmark provides a mock function with given fields: user
func (_m *UserRepository) AddUserFundraisingBookmark(user entities.UserBookmarkFundraising) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for AddUserFundraisingBookmark")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.UserBookmarkFundraising) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddUserVolunteerBookmark provides a mock function with given fields: user
func (_m *UserRepository) AddUserVolunteerBookmark(user entities.UserBookmarkVolunteerVacancy) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for AddUserVolunteerBookmark")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.UserBookmarkVolunteerVacancy) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserArticleBookmark provides a mock function with given fields: id, userid
func (_m *UserRepository) DeleteUserArticleBookmark(id uint, userid uint) error {
	ret := _m.Called(id, userid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserArticleBookmark")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(id, userid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserFundraisingBookmark provides a mock function with given fields: id, userid
func (_m *UserRepository) DeleteUserFundraisingBookmark(id uint, userid uint) error {
	ret := _m.Called(id, userid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserFundraisingBookmark")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(id, userid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserVolunteerBookmark provides a mock function with given fields: id, userid
func (_m *UserRepository) DeleteUserVolunteerBookmark(id uint, userid uint) error {
	ret := _m.Called(id, userid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserVolunteerBookmark")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(id, userid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByEmail provides a mock function with given fields: email
func (_m *UserRepository) FindByEmail(email string) (entities.User, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmail")
	}

	var r0 entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entities.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) entities.User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByFullName provides a mock function with given fields: fullname
func (_m *UserRepository) FindByFullName(fullname string) (entities.User, error) {
	ret := _m.Called(fullname)

	if len(ret) == 0 {
		panic("no return value specified for FindByFullName")
	}

	var r0 entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entities.User, error)); ok {
		return rf(fullname)
	}
	if rf, ok := ret.Get(0).(func(string) entities.User); ok {
		r0 = rf(fullname)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fullname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *UserRepository) FindByID(id uint) (entities.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (entities.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) entities.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByNoTelp provides a mock function with given fields: notel
func (_m *UserRepository) FindByNoTelp(notel string) (entities.User, error) {
	ret := _m.Called(notel)

	if len(ret) == 0 {
		panic("no return value specified for FindByNoTelp")
	}

	var r0 entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entities.User, error)); ok {
		return rf(notel)
	}
	if rf, ok := ret.Get(0).(func(string) entities.User); ok {
		r0 = rf(notel)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(notel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByOTP provides a mock function with given fields: otp
func (_m *UserRepository) FindByOTP(otp string) (entities.User, error) {
	ret := _m.Called(otp)

	if len(ret) == 0 {
		panic("no return value specified for FindByOTP")
	}

	var r0 entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entities.User, error)); ok {
		return rf(otp)
	}
	if rf, ok := ret.Get(0).(func(string) entities.User); ok {
		r0 = rf(otp)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(otp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByResetToken provides a mock function with given fields: token
func (_m *UserRepository) FindByResetToken(token string) (entities.User, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for FindByResetToken")
	}

	var r0 entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entities.User, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) entities.User); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUsername provides a mock function with given fields: username
func (_m *UserRepository) FindByUsername(username string) (entities.User, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for FindByUsername")
	}

	var r0 entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entities.User, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) entities.User); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserArticleBookmark provides a mock function with given fields: id, limit, offset
func (_m *UserRepository) FindUserArticleBookmark(id uint, limit int, offset int) ([]entities.UserBookmarkArticle, error) {
	ret := _m.Called(id, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for FindUserArticleBookmark")
	}

	var r0 []entities.UserBookmarkArticle
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, int, int) ([]entities.UserBookmarkArticle, error)); ok {
		return rf(id, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(uint, int, int) []entities.UserBookmarkArticle); ok {
		r0 = rf(id, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.UserBookmarkArticle)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, int, int) error); ok {
		r1 = rf(id, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserFundraisingBookmark provides a mock function with given fields: id, limit, offset
func (_m *UserRepository) FindUserFundraisingBookmark(id uint, limit int, offset int) ([]entities.UserBookmarkFundraising, error) {
	ret := _m.Called(id, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for FindUserFundraisingBookmark")
	}

	var r0 []entities.UserBookmarkFundraising
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, int, int) ([]entities.UserBookmarkFundraising, error)); ok {
		return rf(id, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(uint, int, int) []entities.UserBookmarkFundraising); ok {
		r0 = rf(id, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.UserBookmarkFundraising)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, int, int) error); ok {
		r1 = rf(id, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserVolunteerBookmark provides a mock function with given fields: id, limit, offset
func (_m *UserRepository) FindUserVolunteerBookmark(id uint, limit int, offset int) ([]entities.UserBookmarkVolunteerVacancy, error) {
	ret := _m.Called(id, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for FindUserVolunteerBookmark")
	}

	var r0 []entities.UserBookmarkVolunteerVacancy
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, int, int) ([]entities.UserBookmarkVolunteerVacancy, error)); ok {
		return rf(id, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(uint, int, int) []entities.UserBookmarkVolunteerVacancy); ok {
		r0 = rf(id, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.UserBookmarkVolunteerVacancy)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, int, int) error); ok {
		r1 = rf(id, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFundraisingById provides a mock function with given fields: id
func (_m *UserRepository) GetFundraisingById(id uint) (entities.Fundraising, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetFundraisingById")
	}

	var r0 entities.Fundraising
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (entities.Fundraising, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) entities.Fundraising); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.Fundraising)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHistoryDonation provides a mock function with given fields: id
func (_m *UserRepository) GetHistoryDonation(id uint) ([]entities.DonationManual, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetHistoryDonation")
	}

	var r0 []entities.DonationManual
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]entities.DonationManual, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) []entities.DonationManual); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.DonationManual)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHistoryVolunteer provides a mock function with given fields: id
func (_m *UserRepository) GetHistoryVolunteer(id uint) ([]entities.Application, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetHistoryVolunteer")
	}

	var r0 []entities.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]entities.Application, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) []entities.Application); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotificationFundraising provides a mock function with given fields:
func (_m *UserRepository) GetNotificationFundraising() ([]entities.Fundraising, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationFundraising")
	}

	var r0 []entities.Fundraising
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities.Fundraising, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities.Fundraising); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Fundraising)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVolunteerById provides a mock function with given fields: id
func (_m *UserRepository) GetVolunteerById(id uint) (entities.Volunteer, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetVolunteerById")
	}

	var r0 entities.Volunteer
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (entities.Volunteer, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) entities.Volunteer); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.Volunteer)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsArticleBookmark provides a mock function with given fields: id, userid
func (_m *UserRepository) IsArticleBookmark(id uint, userid uint) (bool, error) {
	ret := _m.Called(id, userid)

	if len(ret) == 0 {
		panic("no return value specified for IsArticleBookmark")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (bool, error)); ok {
		return rf(id, userid)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) bool); ok {
		r0 = rf(id, userid)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(id, userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsFundraisingBookmark provides a mock function with given fields: id, userid
func (_m *UserRepository) IsFundraisingBookmark(id uint, userid uint) (bool, error) {
	ret := _m.Called(id, userid)

	if len(ret) == 0 {
		panic("no return value specified for IsFundraisingBookmark")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (bool, error)); ok {
		return rf(id, userid)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) bool); ok {
		r0 = rf(id, userid)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(id, userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsVolunteerBookmark provides a mock function with given fields: id, userid
func (_m *UserRepository) IsVolunteerBookmark(id uint, userid uint) (bool, error) {
	ret := _m.Called(id, userid)

	if len(ret) == 0 {
		panic("no return value specified for IsVolunteerBookmark")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (bool, error)); ok {
		return rf(id, userid)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) bool); ok {
		r0 = rf(id, userid)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(id, userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: user
func (_m *UserRepository) Save(user entities.User) (entities.User, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.User) (entities.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(entities.User) entities.User); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	if rf, ok := ret.Get(1).(func(entities.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: user
func (_m *UserRepository) Update(user entities.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProfile provides a mock function with given fields: userid, user
func (_m *UserRepository) UpdateProfile(userid uint, user entities.User) error {
	ret := _m.Called(userid, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, entities.User) error); ok {
		r0 = rf(userid, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
