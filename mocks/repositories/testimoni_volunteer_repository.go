// Code generated by mockery v2.43.2. DO NOT EDIT.

package repositories

import (
	entities "capstone/entities"

	mock "github.com/stretchr/testify/mock"
)

// TestimoniVolunteerRepository is an autogenerated mock type for the TestimoniVolunteerRepository type
type TestimoniVolunteerRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: testimoniVolunteer
func (_m *TestimoniVolunteerRepository) Create(testimoniVolunteer entities.TestimoniVolunteer) (entities.TestimoniVolunteer, error) {
	ret := _m.Called(testimoniVolunteer)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entities.TestimoniVolunteer
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.TestimoniVolunteer) (entities.TestimoniVolunteer, error)); ok {
		return rf(testimoniVolunteer)
	}
	if rf, ok := ret.Get(0).(func(entities.TestimoniVolunteer) entities.TestimoniVolunteer); ok {
		r0 = rf(testimoniVolunteer)
	} else {
		r0 = ret.Get(0).(entities.TestimoniVolunteer)
	}

	if rf, ok := ret.Get(1).(func(entities.TestimoniVolunteer) error); ok {
		r1 = rf(testimoniVolunteer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerJoinedVolunteer provides a mock function with given fields: customerID, volunteerID
func (_m *TestimoniVolunteerRepository) CustomerJoinedVolunteer(customerID uint, volunteerID uint) (bool, error) {
	ret := _m.Called(customerID, volunteerID)

	if len(ret) == 0 {
		panic("no return value specified for CustomerJoinedVolunteer")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (bool, error)); ok {
		return rf(customerID, volunteerID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) bool); ok {
		r0 = rf(customerID, volunteerID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(customerID, volunteerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *TestimoniVolunteerRepository) Delete(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: page, limit
func (_m *TestimoniVolunteerRepository) FindAll(page int, limit int) ([]entities.TestimoniVolunteer, int, error) {
	ret := _m.Called(page, limit)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []entities.TestimoniVolunteer
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) ([]entities.TestimoniVolunteer, int, error)); ok {
		return rf(page, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []entities.TestimoniVolunteer); ok {
		r0 = rf(page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.TestimoniVolunteer)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(page, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindAllByVacancyID provides a mock function with given fields: volunteerID
func (_m *TestimoniVolunteerRepository) FindAllByVacancyID(volunteerID uint) ([]entities.TestimoniVolunteer, error) {
	ret := _m.Called(volunteerID)

	if len(ret) == 0 {
		panic("no return value specified for FindAllByVacancyID")
	}

	var r0 []entities.TestimoniVolunteer
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]entities.TestimoniVolunteer, error)); ok {
		return rf(volunteerID)
	}
	if rf, ok := ret.Get(0).(func(uint) []entities.TestimoniVolunteer); ok {
		r0 = rf(volunteerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.TestimoniVolunteer)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(volunteerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *TestimoniVolunteerRepository) FindByID(id uint) (entities.TestimoniVolunteer, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 entities.TestimoniVolunteer
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (entities.TestimoniVolunteer, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) entities.TestimoniVolunteer); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.TestimoniVolunteer)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasCustomerGivenTestimony provides a mock function with given fields: customerID, volunteerID
func (_m *TestimoniVolunteerRepository) HasCustomerGivenTestimony(customerID uint, volunteerID uint) (bool, error) {
	ret := _m.Called(customerID, volunteerID)

	if len(ret) == 0 {
		panic("no return value specified for HasCustomerGivenTestimony")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (bool, error)); ok {
		return rf(customerID, volunteerID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) bool); ok {
		r0 = rf(customerID, volunteerID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(customerID, volunteerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTestimoniVolunteerRepository creates a new instance of TestimoniVolunteerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTestimoniVolunteerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TestimoniVolunteerRepository {
	mock := &TestimoniVolunteerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
