// Code generated by mockery v2.43.2. DO NOT EDIT.

package repositories

import (
	entities "capstone/entities"

	mock "github.com/stretchr/testify/mock"
)

// FundraisingRepository is an autogenerated mock type for the FundraisingRepository type
type FundraisingRepository struct {
	mock.Mock
}

// FindAll provides a mock function with given fields: limit, offset
func (_m *FundraisingRepository) FindAll(limit int, offset int) ([]entities.Fundraising, error) {
	ret := _m.Called(limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []entities.Fundraising
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]entities.Fundraising, error)); ok {
		return rf(limit, offset)
	}
	if rf, ok := ret.Get(0).(func(int, int) []entities.Fundraising); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Fundraising)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllCategories provides a mock function with given fields:
func (_m *FundraisingRepository) FindAllCategories() ([]entities.FundraisingCategory, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAllCategories")
	}

	var r0 []entities.FundraisingCategory
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities.FundraisingCategory, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities.FundraisingCategory); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.FundraisingCategory)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByCategoryID provides a mock function with given fields: id, limit, offset
func (_m *FundraisingRepository) FindByCategoryID(id int, limit int, offset int) ([]entities.Fundraising, error) {
	ret := _m.Called(id, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for FindByCategoryID")
	}

	var r0 []entities.Fundraising
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, int) ([]entities.Fundraising, error)); ok {
		return rf(id, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(int, int, int) []entities.Fundraising); ok {
		r0 = rf(id, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Fundraising)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(id, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *FundraisingRepository) FindByID(id int) (entities.Fundraising, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 entities.Fundraising
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (entities.Fundraising, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) entities.Fundraising); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.Fundraising)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTopFundraisings provides a mock function with given fields:
func (_m *FundraisingRepository) FindTopFundraisings() ([]entities.Fundraising, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindTopFundraisings")
	}

	var r0 []entities.Fundraising
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities.Fundraising, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities.Fundraising); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Fundraising)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: fundraising
func (_m *FundraisingRepository) Update(fundraising entities.Fundraising) (entities.Fundraising, error) {
	ret := _m.Called(fundraising)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 entities.Fundraising
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.Fundraising) (entities.Fundraising, error)); ok {
		return rf(fundraising)
	}
	if rf, ok := ret.Get(0).(func(entities.Fundraising) entities.Fundraising); ok {
		r0 = rf(fundraising)
	} else {
		r0 = ret.Get(0).(entities.Fundraising)
	}

	if rf, ok := ret.Get(1).(func(entities.Fundraising) error); ok {
		r1 = rf(fundraising)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFundraisingRepository creates a new instance of FundraisingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFundraisingRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FundraisingRepository {
	mock := &FundraisingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
